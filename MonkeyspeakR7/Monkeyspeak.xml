<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Monkeyspeak</name>
    </assembly>
    <members>
        <member name="M:Monkeyspeak.SStreamReader.IsPreamble">
            <summary>
            Encoding can really haven't preamble
            </summary>
        </member>
        <member name="P:Monkeyspeak.SStreamReader.Position">
            <summary>
            Use this property for get and set real position in file.
            Position in BaseStream can be not right.
            </summary>
        </member>
        <member name="P:Monkeyspeak.lexical.Compiler.Version">
            <summary>
            Compiler version number
            </summary>
        </member>
        <member name="T:Monkeyspeak.lexical.Expressions.EOSExpression">
            <summary>
            Expression for the END OF STATEMENT
            </summary>
        </member>
        <member name="T:Monkeyspeak.lexical.Expressions.VariableExpression">
            <summary>
            Expression pointing to a Variable reference
            <para>This expression does not have the value of the variable because the variable would not have been assigned yet</para>
            </summary>
        </member>
        <member name="M:Monkeyspeak.lexical.Expressions.VariableExpression.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.#ctor">
            <summary>
            Base abstract class for Monkeyspeak Libraries
            </summary>
        </member>
        <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.RaiseError(System.String)">
            <summary>
            Raises a MonkeyspeakException
            </summary>
            <param name="reason">Reason for the error</param>
        </member>
        <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.Trigger,Monkeyspeak.TriggerHandler,System.String)">
            <summary>
            Registers a Trigger to the TriggerHandler with optional description
            </summary>
            <param name="trigger"></param>
            <param name="handler"></param>
            <param name="description"></param>
        </member>
        <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.Add(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler,System.String)">
            <summary>
            Registers a Trigger to the TriggerHandler with optional description
            </summary>
            <param name="cat"></param>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="description"></param>
        </member>
        <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.Register(Monkeyspeak.Page)">
            <summary>
            Registers this library to a Page
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Monkeyspeak.Libraries.AbstractBaseLibrary.ToString">
            <summary>
            Builds a string representation of the descriptions of each trigger.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Monkeyspeak.Libraries.TimerTask">
            <summary>
            A TimerTask object contains Timer and Page Owner.  Timer is not started from a TimerTask constructor.
            </summary>
        </member>
        <member name="M:Monkeyspeak.Libraries.TimerTask.#ctor(Monkeyspeak.Page,System.Double,System.Double)">
            <summary>
            Timer task that executes (0:300) when it triggers
            </summary>
            <param name="owner"></param>
            <param name="interval">Interval in Seconds</param>
            <param name="Id"></param>
        </member>
        <member name="M:Monkeyspeak.Libraries.Timers.#ctor">
            <summary>
            Default Timer Library.  Call static method Timers.DestroyTimers() when your application closes.
            </summary>
        </member>
        <member name="T:Monkeyspeak.Lexer">
            <summary>
                Converts a reader containing a Monkeyspeak script into a
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Monkeyspeak.Lexer.LookAhead(System.Int32)" -->
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStringAsync(System.String)">
            <summary>
            Loads a Monkeyspeak script from a string into a <see cref="T:Monkeyspeak.Page"/>.
            </summary>
            <param name="chunk">String that contains the Monkeyspeak script source.</param>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromString(System.String)">
            <summary>
            Loads a Monkeyspeak script from a string into a <see cref="T:Monkeyspeak.Page"/>.
            </summary>
            <param name="chunk">String that contains the Monkeyspeak script source.</param>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStringAsync(Monkeyspeak.Page,System.String)">
            <summary>
            Loads a Monkeyspeak script from a string into a <see cref="T:Monkeyspeak.Page"/>.
            </summary>
            <param name="chunk">String that contains the Monkeyspeak script source.</param>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromString(Monkeyspeak.Page,System.String)">
            <summary>
            Loads a Monkeyspeak script from a string into <paramref name="existingPage"/>. and
            clears the old page
            </summary>
            <param name="existingPage">Reference to an existing Page</param>
            <param name="chunk">String that contains the Monkeyspeak script source.</param>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStreamAsync(System.IO.Stream)">
            <summary>
            Loads a Monkeyspeak script from a Stream into a <see cref="T:Monkeyspeak.Page"/>.
            </summary>
            <param name="stream">Stream that contains the Monkeyspeak script. Closes the stream.</param>
            <returns><see cref="T:Monkeyspeak.Page"/></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a Monkeyspeak script from a Stream into a <see cref="T:Monkeyspeak.Page"/>.
            </summary>
            <param name="stream">Stream that contains the Monkeyspeak script. Closes the stream.</param>
            <returns><see cref="T:Monkeyspeak.Page"/></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStreamAsync(Monkeyspeak.Page,System.IO.Stream)">
            <summary>
            Loads a Monkeyspeak script from a Stream into a <see cref="T:Monkeyspeak.Page"/>.
            </summary>
            <param name="stream">Stream that contains the Monkeyspeak script. Closes the stream.</param>
            <returns><see cref="T:Monkeyspeak.Page"/></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadFromStream(Monkeyspeak.Page,System.IO.Stream)">
            <summary>
            Loads a Monkeyspeak script from a Stream into <paramref name="existingPage"/>.
            </summary>
            <param name="existingPage">Reference to an existing Page</param>
            <param name="stream">Stream that contains the Monkeyspeak script. Closes the stream.</param>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledFile(System.String)">
            <summary>
            Loads compiled script from file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.LoadCompiledStream(System.IO.Stream)">
            <summary>
            Loads a compiled script from stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.CompileToFile(Monkeyspeak.Page,System.String)">
            <summary>
            Compiles a Page to a file
            </summary>
            <param name="page"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Monkeyspeak.MonkeyspeakEngine.CompileToStream(Monkeyspeak.Page,System.IO.Stream)">
            <summary>
            Compiles a Page to a stream
            </summary>
            <param name="page"></param>
            <param name="stream"></param>
        </member>
        <member name="P:Monkeyspeak.Options.Version">
            <summary>
            Current assembly version used internally by the compiler to handle versioning
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.CanOverrideTriggerHandlers">
            <summary>
            If set to TRUE then an existing TriggerHandler can be overridden by newer TriggerHandler
            <para>Default: false</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.StringBeginSymbol">
            <summary>
            Beginning string literal symbol
            <para>Default: {</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.StringEndSymbol">
            <summary>
            Ending string literal symbol
            <para>Default: }</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.VariableDeclarationSymbol">
            <summary>
            Variable literal symbol
            <para>Default: %</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.LineCommentSymbol">
            <summary>
            Comment literal symbol
            <para>Default: *</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.BlockCommentBeginSymbol">
            <summary>
            Block Comment beginning literal symbol
            <para>Default: *</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.BlockCommentEndSymbol">
            <summary>
            Block Comment ending literal symbol
            <para>Default: *</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.TriggerLimit">
            <summary>
            Used to limit the maximum amount of triggers per page
            <para>Default: 6000</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.StringLengthLimit">
            <summary>
            Used to limit the maximum length of a string
            <para>Default: Int32.MaxValue</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.VariableCountLimit">
            <summary>
            Used to limit the maximum amount of variables per page
            <para>Default: 1000</para>
            </summary>
        </member>
        <member name="P:Monkeyspeak.Options.TimerLimit">
            <summary>
            Used to limit the maximum amount of timers per execution
            <para>Default: 100</para>
            </summary>
        </member>
        <member name="T:Monkeyspeak.TriggerHandler">
            <summary>
            Used for handling triggers at runtime.
            </summary>
            <param name="reader"></param>
            <returns>True = Continue to the Next Trigger, False = Stop executing current TriggerList</returns>
        </member>
        <member name="T:Monkeyspeak.TriggerHandlerErrorEvent">
            <summary>
            Event for any errors that occur during execution
            If not assigned Exceptions will be thrown.
            </summary>
            <param name="trigger"></param>
            <param name="ex"></param>
        </member>
        <member name="E:Monkeyspeak.Page.Error">
            <summary>
            Called when an Exception is raised during execution
            </summary>
        </member>
        <member name="E:Monkeyspeak.Page.TriggerAdded">
            <summary>
            Called when a Trigger and TriggerHandler is added to the Page
            </summary>
        </member>
        <member name="E:Monkeyspeak.Page.BeforeTriggerHandled">
            <summary>
            Called before the Trigger's TriggerHandler is called.  If there is no TriggerHandler for that Trigger
            then this event is not raised.
            </summary>
        </member>
        <member name="E:Monkeyspeak.Page.AfterTriggerHandled">
            <summary>
            Called after the Trigger's TriggerHandler is called.  If there is no TriggerHandler for that Trigger
            then this event is not raised.
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.Reset(System.Boolean)">
            <summary>
            Clears all Variables and optionally clears all TriggerHandlers from this Page.
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.Clear">
            <summary>
            Removes the triggers.
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.GetTriggerDescriptions">
             <summary>
            
             </summary>
             <returns>IEnumerable of Triggers</returns>
        </member>
        <member name="M:Monkeyspeak.Page.LoadSysLibrary">
            <summary>
            Loads Monkeyspeak Sys Library into this Page
            <para>Used for System operations involving the Environment or Operating System</para>
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.LoadStringLibrary">
            <summary>
            Loads Monkeyspeak String Library into this Page
            <para>Used for basic String operations</para>
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.LoadIOLibrary">
            <summary>
            Loads Monkeyspeak IO Library into this Page
            <para>Used for File Input/Output operations</para>
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.LoadMathLibrary">
            <summary>
            Loads Monkeyspeak Math Library into this Page
            <para>Used for Math operations (add, subtract, multiply, divide)</para>
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.LoadTimerLibrary">
            <summary>
            Loads Monkeyspeak Timer Library into this Page
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.LoadDebugLibrary">
            <summary>
            Loads Monkeyspeak Debug Library into this Page
            <para>Used for Debug breakpoint insertion. Won't work without Debugger attached.</para>
            </summary>
        </member>
        <member name="M:Monkeyspeak.Page.LoadLibrary(Monkeyspeak.Libraries.AbstractBaseLibrary)">
            <summary>
            Loads a <see cref="T:Monkeyspeak.Libraries.AbstractBaseLibrary"/> into this Page
            </summary>
            <param name="lib"></param>
        </member>
        <member name="M:Monkeyspeak.Page.LoadLibraryFromAssembly(System.String)">
            <summary>
            Loads trigger handlers from a assembly dll file
            </summary>
            <param name="assemblyFile">The assembly in the local file system</param>
        </member>
        <member name="M:Monkeyspeak.Page.GetVariable(System.String)">
            <summary>
            Gets a Variable with Name set to <paramref name="name"/>
            <b>Throws Exception if Variable not found.</b>
            </summary>
            <param name="name">The name of the Variable to retrieve</param>
            <returns>The variable found with the specified <paramref name="name"/> or throws Exception</returns>
        </member>
        <member name="M:Monkeyspeak.Page.HasVariable(System.String)">
            <summary>
            Checks the scope for the Variable with Name set to <paramref name="name"/>
            </summary>
            <param name="name">The name of the Variable to retrieve</param>
            <returns>True on Variable found.  <para>False if Variable not found.</para></returns>
        </member>
        <member name="M:Monkeyspeak.Page.SetTriggerHandler(Monkeyspeak.TriggerCategory,System.Int32,Monkeyspeak.TriggerHandler)">
            <summary>
            Assigns the TriggerHandler to a trigger with <paramref name="category"/> and <paramref name="id"/>
            </summary>
            <param name="category"></param>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="description"></param>
        </member>
        <member name="M:Monkeyspeak.Page.SetTriggerHandler(Monkeyspeak.Trigger,Monkeyspeak.TriggerHandler)">
            <summary>
            Assigns the TriggerHandler to <paramref name="trigger"/>
            </summary>
            <param name="trigger"><see cref="T:Monkeyspeak.Trigger"/></param>
            <param name="handler"><see cref="T:Monkeyspeak.TriggerHandler"/></param>
            <param name="description">optional description of the trigger, normally the human readable form of the trigger
            <para>Example: "(0:1) when someone says something,"</para></param>
        </member>
        <member name="P:Monkeyspeak.Page.Size">
            <summary>
            Returns the Trigger count on this Page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.Page.Execute(System.Int32[])">
             <summary>
             Executes a trigger block containing TriggerCategory.Cause with ID equal to <param name="id" />
            
             </summary>
             Changed id to Params for multiple Trigger processing.
             This Compensates for a Design Flaw Lothus Marque spotted - Gerolkae
        </member>
        <member name="F:Monkeyspeak.TriggerCategory.Cause">
            <summary>
            A trigger defined with a 0
            <para>Example: (0:1) when someone says something, </para>
            </summary>
        </member>
        <member name="F:Monkeyspeak.TriggerCategory.Condition">
            <summary>
            A trigger defined with a 1
            <para>Example: (1:2) and they moved # units left, </para>
            </summary>
        </member>
        <member name="F:Monkeyspeak.TriggerCategory.Effect">
            <summary>
            A trigger defined with a 5
            <para>Example: (5:1) print {Hello World} to the console. </para>
            </summary>
        </member>
        <member name="F:Monkeyspeak.TriggerCategory.Undefined">
            <summary>
            A trigger that was not defined.  You should never encounter this
            if you do then something isn't quite right.
            </summary>
        </member>
        <member name="T:Monkeyspeak.TriggerHandlerAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="M:Monkeyspeak.TriggerHandlerAttribute.#ctor(Monkeyspeak.TriggerCategory,System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="category">Trigger Category</param>
             <param name="id">Trigger ID</param>
             <param name="description">Trigger Description</param>
        </member>
        <member name="M:Monkeyspeak.TriggerList.IndexOfTrigger(Monkeyspeak.TriggerCategory,System.Int32)">
            <summary>
            Operates like IndexOf for Triggers
            </summary>
            <param name="cat"></param>
            <param name="id"></param>
            <returns>Index of trigger or -1 if not found</returns>
        </member>
        <member name="T:Monkeyspeak.TriggerReader">
            <summary>
            A Reader that is used to get Variables, Strings, and Numbers from Triggers
            </summary>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.#ctor(Monkeyspeak.Page,Monkeyspeak.Trigger)">
            <summary>
            A Reader that is used to get Variables, Strings, and Numbers from Triggers
            </summary>
            <param name="page"></param>
            <param name="trigger"></param>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.Reset">
            <summary>
            Resets the reader's indexes to 0
            </summary>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.ReadString(System.Boolean)">
            <summary>
            Reads the next String, throws TriggerReaderException on failure
            </summary>
            <returns></returns>
            <exception cref="T:Monkeyspeak.TriggerReaderException"></exception>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.PeekString">
            <summary>
            Peeks at the next value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.ReadVariable(System.Boolean)">
            <summary>
            Reads the next Variable available, throws TriggerReaderException on failure
            </summary>
            <param name="addIfNotExist">Add the Variable if it doesn't exist and return that Variable with a Value equal to null.</param>
            <returns>Variable</returns>
            <exception cref="T:Monkeyspeak.TriggerReaderException"></exception>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.ReadVariableList(System.Boolean)">
            <summary>
            Reads the next Variable list available, throws TriggerReaderException on failure
            </summary>
            <param name="addIfNotExist">Add the Variable if it doesn't exist and return that Variable with a Value equal to null.</param>
            <returns>Variable</returns>
            <exception cref="T:Monkeyspeak.TriggerReaderException"></exception>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.PeekVariable">
            <summary>
            Peeks at the next value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.PeekVariableList">
            <summary>
            Peeks at the next value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.TryReadVariable(Monkeyspeak.IVariable@)">
            <summary>
            Trys to read the next Variable available
            </summary>
            <param name="var">Variable is assigned on success</param>
            <returns>bool on success</returns>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.ReadNumber">
            <summary>
            Reads the next Double available, throws TriggerReaderException on failure
            </summary>
            <returns>Double</returns>
            <exception cref="T:Monkeyspeak.TriggerReaderException"></exception>
        </member>
        <member name="M:Monkeyspeak.TriggerReader.PeekNumber">
            <summary>
            Peeks at the next value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.Variable.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Monkeyspeak.Variable.ToString">
            <summary>
            Returns a const identifier if the variable is constant followed by name,
            <para>otherwise just the name is returned.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Monkeyspeak.Variable.Clone(System.Boolean)">
             <summary>
            
             </summary>
             <param name="asConstant">Clone as Constant</param>
             <returns></returns>
        </member>
        <member name="M:Monkeyspeak.VariableList.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Shared.Core.Logging.Logger.MessagesExpire">
            <summary>
            Gets or sets the messages expire time limit.
            Messages that have expired are removed from history.
            This property used in conjunction with SupressSpam = true prevents
            too much memory from being used over time
            </summary>
            <value>
            The messages expire time limit.
            </value>
        </member>
        <member name="P:Shared.Core.Logging.Logger.LogOutput">
            <summary>
            Sets the <see cref="T:Shared.Core.Logging.ILogOutput"/>.
            </summary>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
        </member>
    </members>
</doc>
